package assignment;

import java.util.ArrayList;
import java.util.List;

/**
 * @author Robin Fritz
 * @version 1.0
 */
public class StudentPortal {
    private List<Professor> professors;
    private List<Instructor> instructors;
    private List<Student> students;
    private List<Module> modules;
    private List<Lecture> lectures;
    private List<Exercise> exercises;

    /**
     * Constructor of the class StudentPortal.
     */
    public StudentPortal() {
        professors = new ArrayList<>();
        instructors = new ArrayList<>();
        students = new ArrayList<>();
        modules = new ArrayList<>();
        lectures = new ArrayList<>();
        exercises = new ArrayList<>();
    }

    /**
     * Switch for add commands.
     *
     * @param inputArr String array with the command
     * @param param    String array with parameters
     * @return Returns a String generated by the executed method
     * @throws InputException For input format type errors
     */
    public String add(String[] inputArr, String[] param) throws InputException {
        switch (inputArr[0]) {
            case "add-professor":
                return addProfessor(param);

            case "add-instructor":
                return addInstructor(param);

            case "add-student":
                return addStudent(param);

            case "add-module":
                return addModule(param);

            case "add-lecture":
                return addLecture(param);

            case "add-exercise":
                return addExercise(param);

            default:
                throw new InputException("wrong input format!");
        }
    }

    /**
     * Switch for list commands.
     *
     * @param inputArr String array with parameters
     * @return Returns a String generated by the executed method
     * @throws InputException For input format type errors
     */
    public String list(String[] inputArr) throws InputException {
        switch (inputArr[0]) {
            case "list-professor":
                return listProfessor();

            case "list-instructor":
                return listInstructor();

            case "list-student":
                return listStudent();

            case "list-module":
                return listModule();

            case "list-lecture":
                return listLecture();

            case "list-exercise":
                return listExercise();

            default:
                throw new InputException("wrong input!");
        }
    }

    /**
     * Switch for summary commands.
     *
     * @param inputArr String array with the command
     * @param param    String array with parameters
     * @return Returns a String generated by the executed method
     * @throws InputException For input format type errors
     */
    public String summary(String[] inputArr, String[] param) throws InputException {
        switch (inputArr[0]) {
            case "summary-professor":
                return summProfessor(param);

            case "summary-instructor":
                //return summInstructor(param);

            case "summary-student":
                //return summStudent(param);

            case "summary-module":
                //return summModule(param);

            case "summary-lecture":
                //return summLecture(param);

            case "summary-exercise":
                //return summExercise(param);

            default:
                throw new InputException("wrong input!");
        }
    }

    /**
     * Switch for examination commands.
     *
     * @param inputArr String array with command
     * @param param    String array with parameters
     * @return Returns a String generated by the executed method
     * @throws InputException For input format type errors
     */
    public String examination(String[] inputArr, String[] param) throws InputException {
        switch (inputArr[0]) {
            case "examination-competence":
                //return examCompetence(param);

            case "examination-marking":
                //return examMarking(param);

            default:
                throw new InputException("wrong input!");
        }
    }

    private String addProfessor(String[] param) throws InputException {
        Check.checkAmount(param, 3);
        Check.checkString(param[0]);
        Check.checkString(param[1]);
        Check.checkString(param[2]);

        Professor newProf = new Professor(param[0], param[1], param[2]);

        for (int i = 0; i < professors.size(); i++) {
            if (i == professors.size() - 1 && professors.get(i).isSmaller(newProf)) {
                professors.add(newProf);
                return "OK";
            }
            if (!professors.get(i).isSmaller(newProf)) {
                List<Professor> temp = new ArrayList<>();
                for (int j = i; j < professors.size(); j++) {
                    temp.add(professors.get(j));
                }
                professors.add(i, newProf);
                for (int j = i + 1; j < professors.size() + 1; j++) {
                    professors.add(j, temp.get(j - i + 1));
                }
                return "OK";
            }
        }
        if (professors.size() == 0) {
            professors.add(newProf);
            return "OK";
        }
        return "";
    }

    private String listProfessor() {
        String output = "";
        if (professors != null) {
            for (Professor val : professors) {
                output += val + "\n";
            }
        }
        return output.trim();
    }

    private String summProfessor(String[] param) throws InputException {
        Check.checkAmount(param, 3);
        Check.checkString(param[0]);
        Check.checkString(param[1]);
        Check.checkString(param[2]);

        String output = "";
        Professor temp = new Professor(param[0], param[1], param[2]);

        for (int i = 0; i < professors.size(); i++) {
            Professor prof = professors.get(i);
            if (prof.isEqual(temp)) {
                if (prof.getProfessorLectures().size() != 0) {
                    for (int j = 0; j < prof.getProfessorLectures().size(); j++) {
                        Lecture lect = prof.getProfessorLectures().get(j);
                        output += lect.getId() + " " + lect.getName() + " " + lect.getOutputAverage() + "\n";
                    }
                }
            }
        }

        return output.trim();
    }

    private String addInstructor(String[] param) throws InputException {
        Check.checkAmount(param, 3);
        Check.checkString(param[0]);
        Check.checkString(param[1]);
        Check.checkString(param[2]);
        instructors.add(new Instructor(param[0], param[1], param[2]));
        return "OK";
    }

    private String listInstructor() {
        String output = "";
        if (instructors != null) {
            for (Instructor val : instructors) {
                output += val + "\n";
            }
        }
        return output.trim();
    }

    private void summInstructor(String[] param) {
        String output = "";
        return; //instructor.summInstr(param);
    }

    private String addStudent(String[] param) throws InputException {
        Check.checkAmount(param, 3);
        Check.checkString(param[0]);
        Check.checkString(param[1]);
        Check.checkInteger(param[2]);

        Student newStud = new Student(param[0], param[1], Integer.parseInt(param[2]));

        for (int i = 0; i < students.size(); i++) {
            if (students.get(i).getMatriculationNumber() == newStud.getMatriculationNumber()) {
                throw new InputException("wrong input format!");
            }
            if (i == students.size() - 1 && students.get(i).getMatriculationNumber()
                    < newStud.getMatriculationNumber()) {
                students.add(newStud);
                return "OK";
            }
            if (students.get(i).getMatriculationNumber() > newStud.getMatriculationNumber()) {
                List<Student> temp = new ArrayList<>();
                for (int j = i; j < students.size(); j++) {
                    temp.add(students.get(j));
                }
                students.add(i, newStud);
                for (int j = i + 1; j < students.size() + 1; j++) {
                    students.add(j, temp.get(j - i + 1));
                }
                return "OK";
            }
        }
        if (students.size() == 0) {
            students.add(newStud);
            return "OK";
        }
        return "";
    }

    private String listStudent() {
        String output = "";
        if (students != null) {
            for (Student val : students) {
                output += val + "\n";
            }
        }
        return output.trim();
    }

    private void summStudent(String[] param) {
        //return student.summStud(param);
    }

    private String addModule(String[] param) throws InputException {
        Check.checkAmount(param, 1);
        Check.checkString(param[0]);
        modules.add(new Module(param[0]));
        return "OK";
    }

    private String listModule() {
        String output = "";
        for (Module val : modules) {
            output += val + "\n";
        }
        return output.trim();
    }

    private void summModule(String[] param) {
        //return module.summModule(param);
    }

    private String addLecture(String[] param) throws InputException {
        Check.checkAmount(param, 6);
        Check.checkString(param[0]);
        Check.checkInteger(param[1]);
        Check.checkString(param[2]);
        Check.checkString(param[3]);
        Check.checkString(param[4]);
        Check.checkInteger(param[5]);
        Lecture newLecture = new Lecture(param[0], Integer.parseInt(param[1]), param[2], param[3], param[4], Integer
                .parseInt(
                        param[5]));

        lectures.add(newLecture);

        if (professors.size() != 0) {
            for (Professor val : professors) {
                Professor temp = new Professor(param[2], param[3], param[4]);
                if (temp.isEqual(val)) {
                    val.getProfessorLectures().add(newLecture);
                }
            }
        } else {
            throw new InputException("wrong input!");
        }

        return "OK";
    }

    private String listLecture() {
        String output = "";
        for (Lecture val : lectures) {
            output += val + "\n";
        }
        return output.trim();
    }

    private void summLecture(String[] param) {
        //return lecture.summLecture(param);
    }

    private String addExercise(String[] param) throws InputException {
        Check.checkAmount(param, 5);
        Check.checkString(param[0]);
        Check.checkInteger(param[1]);
        Check.checkString(param[2]);
        Check.checkString(param[3]);
        Check.checkInteger(param[4]);
        exercises.add(new Exercise(param[0], Integer.parseInt(param[1]), param[2], param[3], param[4]));
        return "OK";
    }

    private String listExercise() {
        String output = "";
        for (Exercise val : exercises) {
            output += val + "\n";
        }
        return output.trim();
    }

    private void summExercise(String[] param) {
        //return exercise.summExercise(param);
    }

    private void examCompetence(String[] param) {
        //return exam.examCompetence(param);
    }

    private void examMarking(String[] param) {
        //return exam.examMarking(param);
    }
}
